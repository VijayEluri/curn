---------------------------------------------------------------------------
CHANGELOG: curn

$Id$
---------------------------------------------------------------------------

Version 2.4 (15 August, 2005)

- MiniRSSParser (org.clapper.curn.parser.minirss) no longer aborts the parsing
  of an entire feed if an embedded URL (e.g., within a <link> element) is bad.
  That element is skipped, but processing of the feed continues. The error is
  logged.

- Fixed problem with feeds that re-use item URLs. Previously, curn assumed
  that a feed always specified a new URL for a new item. If it found an item
  URL in its cache, curn would not display the item even if the item had new
  content (because it assumed that new content implied a new item URL). That
  broken assumption has been fixed. Now, when examining each item from an
  RSS feed, curn:

  a. First determines whether the item has a unique ID (e.g., a <guid>
     element in an RSS 2.0 feed, or an <id> element in an Atom feed). If
     the item has a unique ID, and that unique ID isn't in the cache, curn
     assumes that the item is new, and displays it.

  b. If the item has no ID, then curn attempts to find the item's URL in the
     cache. If the URL is not in the cache, then curn assumes the item is new,
     and displays it.

  c. If the item is in the cache, curn then extracts the (optional) item
     publication date from the item and the (optional) publication date
     from the cache entry. If both dates are present, curn compares them;
     if the item's publication date is newer than the publication date in
     the item's cache entry, curn assumes the item is new, and displays it.

  d. If all of the above tests fail (meaning the item is in the cache, but
     no additional information is available), then curn assumes that the item
     is old, and does not display it.

  Note: Prior to this fix, the curn cache did not keep an item's
  publication date. It does now. There is no need to update your cache,
  however; curn will adjust the cache automatically, over time, as items
  naturally age. The only exception is for feeds that are already
  misbehaving--e.g., feeds that have unique IDs per item and re-use the
  item URLs. For feeds like that, the simplest solution is to remove the
  feed's entry from the (XML) cache file and re-run curn.

- The HTMLOutputHandler (org.clapper.curn.output.html.HTMLOutputHandler)
  now supports a table of contents, which is useful when the number of
  feeds or items in the generated output is large. The generation of the
  table of contents is controlled by a new HTMLOutputHandler-specific
  configuration item, "TOCItemThreshold". That value defines the minimum
  number of feed items (across all feeds) that must be displayed before a
  table of contents is generated. The default value is a very large number,
  which effectively disables the table of contents completely.


Version 2.3 (10 August, 2005)

- Curn now supports global and feed-specific "AllowEmbeddedHTML" configuration
  options. If set for a feed (or set globally and not overridden by the feed),
  the HTMLOutputHandler class will not strip any raw HTML it finds in the
  feed title, item title, item description, or item author fields; it will,
  instead, insert the raw HTML in the resulting HTML output. This is useful
  when handling feeds that have embedded images, for instance (like a comic
  site).

- Enhanced the MiniRSSParser Atom feed parser to account for the Atom 1.0
  specification. As part of this change:

  a) The org.clapper.curn.parser.RSSChannel interface has been converted to
     an abstract class.

  b) The org.clapper.curn.parser.RSSChannel and org.clapper.curn.parser.RSSItem
     classes now require new addAuthor(), clearAuthors(), and getAuthors()
     methods. The old getAuthor() and setAuthor() methods have been
     converted to concrete, final methods. These changes were necessary to
     support multiple authors per feed and per item. Existing callers of
     the old methods do not have to change, but existing curn parser
     adapters will have to change. (All parser adapters shipped with curn
     have been changed.)

NOTE: This version of curn REQUIRES version 2.0.2 of the org.clapper.util
library, since it uses some new methods in the
org.clapper.util.text.TextUtil class. It will NOT run with earlier versions.


Version 2.2.1 (09 Aug, 2005)

- Curn's RSS date-parsing logic had a bug causing a NullPointerException
  if the date was empty or null. This could happen, for instance, in an
  RSS 1.0 feed with this construct:

	<dc:date></dc:date>

  That bug has been fixed. 

  Thanks to Tobias Kroha <tobias /at/ esce-neun /dot/ de> for finding the
  bug and suggesting the fix.


Version 2.2 (29 July, 2005)

- Curn's output handlers now support a "ShowCurnInfo" configuration
  parameter. If set to "true" (the default), then the output handlers write
  the curn version and other information to the generated output. If set to
  "false", the output handlers suppress that information. (Previously, the
  output handlers wrote that information unconditionally.)

  The "ShowCurnInfo" configuration parameter is actually parsed by the
  org.clapper.curn.output.FileOutputHandler abstract base class, so it is
  available to any subclass that wishes to query its status.

- Curn no longer copies the generated output files to temporary files when
  emailing them. This buglet resulted from a combination of two things:

  a) The utility library (http://www.clapper.org/software/java/util/) has a
     set of email classes that provide a simplified front-end to the Java
     Mail API. The EmailMessage class supports adding attachments to and
     setting the text of a message from a java.io.File, a String or an
     java.io.InputStream. When using an InputStream, the EmailMessage class
     copies the contents to a temporary file. (It does this primarily
     because the Java Activation Framework's DataSource interface, which is
     used when specifying attachments, allows the caller to access the data
     source multiple times--and the JavaMail API appears to do that. One
     can't guarantee that an InputStream is rewindable, so the only
     solution, when presented with an InputStream attachment, is to copy
     the InputStream to a file.)

  b) The curn OutputHandler interface specifies a getGeneratedOutput()
     method that returned an InputStream, for flexibility (e.g., in case an
     output handler generates its content in memory). But the existing
     output handlers were all producing files anyway. So, the
     OutputHandler.getGeneratedOutput() method now returns a File, instead
     of an InputStream.

     NOTE: This change breaks existing output handlers! If you have a
     custom output handler that does not extend
     org.clapper.curn.output.FileOutputHandler, you'll have to change its
     getGeneratedOutput() method, or it won't compile.

NOTE: This version of curn REQUIRES version 2.0.1 of the org.clapper.util
library, since it uses some new methods in the
org.clapper.util.mail.EmailMessage class. It will NOT run with version 2.0.


Version 2.1.2 (08 July, 2005)

- Curn was not honoring its "MailFrom" configuration option, so it was
  always computing the sender based on the current user name and host name.
  In some environments, using the default (computed) email address can
  cause problems when curn attempts to email its output (and, in any case,
  "curn" ought to honor one of its own documented configuration options).

  Thanks to "Moon Man" <yavinty /at/ yahoo.com> for emailing me about the
  problem.


Version 2.1.1 (07 July, 2005)

- On Windows, curn's supplied output handler classes (TextOutputHandler,
  HTMLOutputHandler) do not always produce output. Fix: Be sure to close
  the PrintWriter objects those classes use internally. The flush() method
  for all existing output handlers now ensure that they close their
  underlying streams, if any. The documentation for the OutputHandler class
  has been changed to indicate that the flush() method should also close
  any open streams.

  This bug does not appear to affect Unix Java VMs.

  Thanks to "Moon Man" <yavinty /at/ yahoo.com> for emailing me about the
  problem and the fix.


Version 2.1 (11 May, 2005)

- The ShowAuthors configuration item can now be specified per-feed,
  as well as globally. The global value is the default.

- The HTML output now shows the author, if configured.

- The configuration file can now contain a "CacheBackup" directive that
  specifies the location of a cache backup. Curn will copy the cache to
  the backup file before updating the cache on disk.


Version 2.0 (22 April, 2005)

- Now requires Java 1.5.0 JDK/JRE.

- Various classes converted to use JDK 1.5 generics.

- MiniRSSParser now handles (and ignores) empty <link> elements in
  RSS version 0.92, RSS version 2.0, and Atom XML files.

- The cache file is now XML, instead of serialized Java objects. Using XML
  makes the code less sensitive to changes in the cache-related classes.
  Curn will still load an old-style serialized Java cache file, but it will
  convert it to XML when it saves the cache.

- The "mimeType" object that the ScriptOutputHandler class publishes via
  the Bean Scripting Framework is now a java.io.StringWriter, instead of a
  java.io.StringBuffer. Use of a StringBuffer causes exceptions with BSF
  and the 1.5.0 JDK.

- The configuration file now supports an "env" pseudosection, to
  interpolate the values of environment variables into a configuration.
  (The 1.5 JDK has re-established support for environment variables.)
  See the User's Guide for details.


Version 2.1 (11 May, 2005)

- The ShowAuthors configuration item can now be specified per-feed,
  as well as globally. The global value is the default.

- The HTML output now shows the author, if configured.

- The configuration file can now contain a "CacheBackup" directive that
  specifies the location of a cache backup. Curn will copy the cache to
  the backup file before updating the cache on disk.


Version 2.0 (22 April, 2005)

- Now requires Java 1.5.0 JDK/JRE.

- Various classes converted to use JDK 1.5 generics.

- MiniRSSParser now handles (and ignores) empty <link> elements in
  RSS version 0.92, RSS version 2.0, and Atom XML files.

- The cache file is now XML, instead of serialized Java objects. Using XML
  makes the code less sensitive to changes in the cache-related classes.
  Curn will still load an old-style serialized Java cache file, but it will
  convert it to XML when it saves the cache.

- The "mimeType" object that the ScriptOutputHandler class publishes via
  the Bean Scripting Framework is now a java.io.StringWriter, instead of a
  java.io.StringBuffer. Use of a StringBuffer causes exceptions with BSF
  and the 1.5.0 JDK.

- The configuration file now supports an "env" pseudosection, to
  interpolate the values of environment variables into a configuration.
  (The 1.5 JDK has re-established support for environment variables.)
  See the User's Guide for details.


Version 1.15.12 (09 Aug, 2005) [MAINTENANCE RELEASE OF DEPRECATED CODE BRANCH]

- Curn's RSS date-parsing logic had a bug causing a NullPointerException
  if the date was empty or null. This could happen, for instance, in an
  RSS 1.0 feed with this construct:

	<dc:date></dc:date>

  That bug has been fixed. 

  Thanks to Tobias Kroha <tobias /at/ esce-neun /dot/ de> for finding the
  bug and suggesting the fix.

- Curn's output handlers now support a "ShowCurnInfo" configuration
  parameter. If set to "true" (the default), then the output handlers write
  the curn version and other information to the generated output. If set to
  "false", the output handlers suppress that information. (Previously, the
  output handlers wrote that information unconditionally.)

  The "ShowCurnInfo" configuration parameter is actually parsed by the
  org.clapper.curn.output.FileOutputHandler abstract base class, so it is
  available to any subclass that wishes to query its status.

- Curn no longer copies the generated output files to temporary files when
  emailing them. This buglet resulted from a combination of two things:

  a) The utility library (http://www.clapper.org/software/java/util/) has a
     set of email classes that provide a simplified front-end to the Java
     Mail API. The EmailMessage class supports adding attachments to and
     setting the text of a message from a java.io.File, a String or an
     java.io.InputStream. When using an InputStream, the EmailMessage class
     copies the contents to a temporary file. (It does this primarily
     because the Java Activation Framework's DataSource interface, which is
     used when specifying attachments, allows the caller to access the data
     source multiple times--and the JavaMail API appears to do that. One
     can't guarantee that an InputStream is rewindable, so the only
     solution, when presented with an InputStream attachment, is to copy
     the InputStream to a file.)

  b) The curn OutputHandler interface specifies a getGeneratedOutput()
     method that returned an InputStream, for flexibility (e.g., in case an
     output handler generates its content in memory). But the existing
     output handlers were all producing files anyway. So, the
     OutputHandler.getGeneratedOutput() method now returns a File, instead
     of an InputStream.

     NOTE: This change breaks existing output handlers! If you have a
     custom output handler that does not extend
     org.clapper.curn.output.FileOutputHandler, you'll have to change its
     getGeneratedOutput() method, or it won't compile.

NOTE: This version of curn REQUIRES version 1.1.9 of the org.clapper.util
library, since it uses some new methods in the
org.clapper.util.mail.EmailMessage class. It will NOT run with version 1.1.8.


Version 1.5.11 (08 July, 2005) [MAINTENANCE RELEASE OF DEPRECATED CODE BRANCH]

- Curn was not honoring its "MailFrom" configuration option, so it was
  always computing the sender based on the current user name and host name.
  In some environments, using the default (computed) email address can
  cause problems when curn attempts to email its output (and, in any case,
  "curn" ought to honor one of its own documented configuration options).

  Thanks to "Moon Man" <yavinty /at/ yahoo.com> for emailing me about the
  problem.


Version 1.5.10 (07 July, 2005) [MAINTENANCE RELEASE OF DEPRECATED CODE BRANCH]

- On Windows, curn's supplied output handler classes (TextOutputHandler,
  HTMLOutputHandler) do not always produce output. Fix: Be sure to close
  the PrintWriter objects those classes use internally. The flush() method
  for all existing output handlers now ensure that they close their
  underlying streams, if any. The documentation for the OutputHandler class
  has been changed to indicate that the flush() method should also close
  any open streams.

  This bug does not appear to affect Unix Java VMs.

  Thanks to "Moon Man" <yavinty /at/ yahoo.com> for emailing me about the
  problem and the fix.


Version 1.5.9 (21 April, 2005)

- The "mimeType" object that the ScriptOutputHandler class publishes via
  the Bean Scripting Framework is now a java.io.StringWriter, instead of a
  java.io.StringBuffer. Use of a StringBuffer causes exceptions with BSF
  and the 1.5.0 JDK.


Version 1.5.8 (08 April, 2005)

- MiniRSSParser now handles (and ignores) empty <link> elements in
  RSS version 0.92, RSS version 2.0, and Atom XML files.
- When run in single-threaded mode (i.e., MaxThreads set to 1 in the
  configuration file), an exception that occurs while processing one
  feed doesn't abort the whole run.


Version 1.5.7 (09 February, 2005)

- Substitution expressions (e.g., in the PreparseEdit or EditItemURL
  configuration items) now properly properly handle substitutions of the empty
  string. Strings like this were previously rejected as syntactically
  incorrect:

      s/foo//

  They are now permitted and processed properly.

- build.xml no longer hard-codes jikes compiler. To use jikes, either
  pass 

      -Dbuild.compiler=jikes 

  to ant, or put that option in ANT_OPTS in your personal ant startup file
  ($HOME/.antrc on Unix, or %HOME%\antrc_pre.bat on Windows).

- build.xml corrected so it no longer unconditionally recompiles everything.

- Serializable classes now provide their own serialVersionUID variable, per
  recommendations in the JDK 1.5 java.io.Serializable docs and in jikes
  1.22 warnings.


Version 1.5.6 (02 December, 2004)

- Added new MaxSummarySize configuration parameter. If a summary exceeds
  the specified size, it is truncated. See the User's Guide and the sample
  configuration file for details.

- Abstract org.clapper.curn.parser.RSSItem class now contains a
  getSummaryForDisplay() utility method, which handles stripping HTML tags,
  optionally using the description if the summary is not defined,
  and applying the MaxSummarySize constraint (if applicable). Modified
  existing output handlers to use this new method.


Version 1.5.5 (10 November, 2004)

- NOTE: You MUST have version 1.1.4 (or better) of the org.clapper.util
  library, or this version of curn WILL NOT WORK!

- Added "UserAgent" configuration parameter in the [curn] section and the
  individual feed sections. See the sample configuration or the User's
  Guide for details.

- Added "SaveAsEncoding" configuration parameter to individual feed
  sections. Allows specification of encoding for output file. Encoding can
  later be used via the ForceEncoding parameter for an instance of curn
  that reads a saved file. See the sample configuration or the User's Guide
  for details.

- The "ForceCharacterEncoding" per-feed configuration parameter is now
  called "ForceEncoding" (though "ForceCharacterEncoding" is recognized,
  as well, for backward compatibility).

- For "file:" URLs, unless "ForceEncoding" is specified, the default encoding
  is now "utf-8", instead of the Java VM's default. This plays better with
  the new "SaveAsEncoding" parameter.

- Curn now gives email attachments names with reasonable extensions.
  Previously, default names (ending in ".tmp") were used, which gave some 
  mail clients (e.g., some versions of Outlook) fits.


Version 1.5.4 (20 October, 2004)

- In the org.clapper.util API, org.clapper.util.misc.Logger is now in the
  org.clapper.util.logging package and is now uses the java.util.logging
  API directly, instead of using Jakarta Commons Logging. This eliminates
  another third-party library dependency, but required modifications
  various "import" statement in curn classes.


Version 1.5.3 (16 October, 2004)

- curn now sets an appropriate "User-Agent" HTTP header on HTTP requests,
  instead of defaulting to whatever the Java VM uses.

- An exception thrown while processing a feed now contains the feed URL
  in its exception message. This is especially useful for emailed log
  exceptions.

- Where possible, exception messages are now stored in properties files and
  accessed via ResourceBundle objects, allowing for localization.


Version 1.5.2 (12 October, 2004)

- Simplified loading of API version, in build.xml. Instead of loading
  version from Version.class, it now loads the version from a properties
  file. The Version class uses the same properties file, as a resource
  bundle.


Version 1.5.1 (10 October, 2004)

- Fixed bug with PreparseEdit per-feed configuration directive (introduced
  in version 1.5). Multiple edit commands would cause duplication of lines
  in feeds XML file.

- If there are no output handlers defined, feeds are not run through the
  XML parser (since there's no point). This was already supposed to be
  happening, but there was this small bug...

- Added "SaveOnly" configuration option to Feed sections. See User's Guide
  or sample config for details.


Version 1.5 (07 October, 2004)

- Now requires JDK 1.4 or better. JDK 1.3 is no longer supported. Among
  the reasons for this requirement:

  * I wanted to use the new assertion capabilities of 1.4

  * The regular expression classes that come with 1.4 are more extensible
    than the Jakarta ORO classes, in that they work with anything that
    implements the CharSequence interface, not just with Strings. Plus,
    using java.util.regexp, instead of Jakarta ORO, removes a third-party
    library dependency.

- Added new PreparseEdit configuration file entry, supported in the Feed
  section. Permits applying perl-like s/// edits to the downloaded XML file
  before it is parsed. Useful for feeds that serve XML files that don't
  parse properly. (One site I read insists on serving a channel that
  contains unescaped "&" characters in the text.) See the User's Guide
  and the sample configuration for details on this new configuration
  parameter.

- Converted code that used Jakarta ORO to use the JDK 1.4 java.util.regexp
  classes.

- Overhauled build.xml to make compilations more efficient. Requires a
  newer version of Jikes (if compiling with Jikes).

- Cleaned up a lot of unnecessary imports. Addressed minor issues that
  Jikes warned about.


Version 1.4.1 (28 September, 2004):

- Added ForceCharacterEncoding (per-feed) configuration parameter. If
  specified, curn will use the supplied character encoding when parsing
  the feed's XML, instead of the server-supplied or document-supplied
  encoding. This is useful in the following cases:

  * the remote HTTP server doesn't supply an HTTP Content-Encoding header, 
    and the local (Java) default encoding doesn't match the document's 
    encoding
  * the remote HTTP server supplies the wrong encoding

  See the Users Guide or the sample configuration file for more information.

- Added HTMLEncoding parameter to the configuration for the HTMLOutputHandler
  (org.clapper.curn.output.html.HTMLOutputHandler) class. This parameter
  sets the desired character set encoding of the generated HTML file.
  The encoding is set in a <META> tag in the document, and it is used when
  opening the output file (to ensure proper translation of characters from
  the in-memory Unicode character set). If not set, it defaults to "utf-8".


Version 1.4 (22 September, 2004):

- All output handlers have been moved under "org.clapper.output". It
  is (regrettably) necessary to update curn configuration files that
  reference the old fully-qualified class names.

  Handler class               Old Package             New Package
  ---------------------------------------------------------------------------
  HTMLOutputHandler           org.clapper.htmloutput  org.clapper.output.html
  SimpleSummaryOutputHandler  org.clapper.curn        org.clapper.curn.output
  TextOutputHandler           org.clapper.curn        org.clapper.curn.output
  ---------------------------------------------------------------------------

- Curn now supports multiple output handlers of the same class in the same
  configuration file.

- Curn now comes bundled with a new ScriptOutputHandler 
  (org.clapper.output.script.ScriptOutputHandler). This handler requires the
  Apache Jakarta Bean Scripting Framework (BSF), available at
  "http://jakarta.apache.org/bsf/". It's basically a shim that uses BSF
  to permit output handlers to be written in any BSF-supported scripting
  language (e.g., Jython, JRuby, Rhino Javascript, etc.)

- The "Quiet" configuration option is no longer supported. If it appears
  in a configuration file, it will be silently ignored. Similarly, the
  --quiet (-q) and --no-quiet (-Q) command line options no longer exist.

- (API) When parsed from the config, output handlers are now wrapped in
  ConfiguredOutputHandler objects, which contain all the config data for
  the handler, and provide a means to instantiate a handler easily.

- (API) The ConfigFile class no longer supports the Quiet configuration
  option, and the methods used to test for the value of that option have
  been removed.


Version 1.3.3 (16 September, 2004):

- Fixed slight problem when translating embedded newlines into spaces in
  parsed XML character data.


Version 1.3.2 (15 September, 2004):

- Now handles feeds with alternate character sets (e.g., UTF-8) better.
  Note that there's still the possibility of information loss if a feed
  with an alternate character set such as UTF-8 is saved to a local file,
  and the local file is then parsed by curn. That's because curn currently
  doesn't have a way to save the original character set, so it converts the
  feed to the Java VM's native character set before saving it to the local
  file.

- Added adapter classes for the Rome RSS parser. (See
  https://rome.dev.java.net/). Test with Rome 0.3. Rome supports all the
  current RSS feed types.

  NOTE: Rome requires version 1.0 of JDOM (http://www.jdom.org/)


Version 1.3.1 (13 September, 2004):

- HTMLOutputHandler now displays channel link properly.


Version 1.3 (09 September, 2004):

- Fixed some caching bugs and problems. First, cache lookups are now
  consistent. Second, the cache now supports lookups by item ID and item
  URL, not just ID, and curn will check for the URL if the item isn't
  cached by ID. (Some RSS feeds provide a unique ID for each item. Some
  don't.) This change fixes caching for (broken) RSS feeds that provide
  different IDs for the same URL. I've seen at least one site where the
  ID for a given item changes daily, even though the item and its link do
  not.


Version 1.2 (28 August, 2004):

- First version of curn posted to the web.
