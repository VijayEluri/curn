$Id$
---------------------------------------------------------------------------

PREREQUISITES:
--------------

Before building curn, you'll need:

1. ant, version 1.5 or better, available at http://ant.apache.org/

2. The clapper.org utility library, available at
   http://www.clapper.org/software/java/util/

3. The prerequisite jar files for the clapper.org utility library.

4. The Apache Jakarta Commons Logging API. See 
   http://jakarta.apache.org/commons/logging/

5. The Apache Jakarta ORO regular expression library. See
   http://jakarta.apache.org/oro/

6. The Java Mail API, which, in turn, requires the Java Activation Framework.
   See http://java.sun.com/products/javamail/ 
   and http://java.sun.com/products/javabeans/jaf/index.jsp

7. A SAX2 XML parser library. Apache Xerces (http://xerces.apache.org/)
   is a good choice. The appropriate jar files must be in the CLASSPATH.


BUILDING.
---------

Type "ant dist" in the top-level directory. The code will be compiled to
the "classes" subdirectory, and you'll get an "curn.jar" in "dist/lib".


OPTIONAL COMPONENTS:
--------------------

A. RSS Parsers

curn comes with a built-in minimal RSS parser. However, it has support for
integrating other RSS parsers. The third-party Informa and Rome parsers
have also been integrated into curn, via some adapter classes in the
"parsers/informa" and "parsers/rome" directories, respectively. However,
those adapter classes will not build unless you have installed the
appropriate support libraries. If you've installed Informa and/or Rome, and
made the appropriate jar files available in the CLASSPATH, the curn Ant
"build.xml" file will automatically detect their presence and will
build the adapter classes.

See the Curn Users Guide for details on using other RSS parsers at run-time.


B. Output Handlers

By default, curn builds with a simple text output handler. That output
handler writes the parsed RSS information in plain text. curn also ships
with an output handler that writes HTML output. However, the HTML output
handler classes will not build unless you have installed the third-party
XMLC component. If you've installed XMLC and made the appropriate jar files
available in the CLASSPATH, the curn Ant "build.xml" file will
automatically detect XMLC's presence and will build the HTML output
handler. To install XMLC:

- Download and install XMLC, available at http://xmlc.objectweb.org/

- Place the required XMLC run-time jar files in your CLASSPATH.

- Place the xmlc-taskdef.jar jar file in your CLASSPATH (or in ANT_HOME/lib).
  This makes the <xmlc> ant task available.

See the sample configuration file, sample.cfg, for a sample entry to
enable use of the HTML output handler.


C. Email support

curn can email its output, rather than simply printing it on standard
output. This is especially useful when multiple output handlers are used.
In that case, the output of each handler is attached to the email message
as a "multipart/alternative" attachment.

However, email support is built and can run only if the clapper.org utility
library's email classes are present (and those work only when the Java Mail
API and the Java Activation Framework are present).

See the documentation for the (separate) clapper.org utility library for
details.
