/*---------------------------------------------------------------------------*\
  $Id$
  ---------------------------------------------------------------------------
  This software is released under a Berkeley-style license:

  Copyright (c) 2004-2005 Brian M. Clapper. All rights reserved.

  Redistribution and use in source and binary forms are permitted provided
  that: (1) source distributions retain this entire copyright notice and
  comment; and (2) modifications made to the software are prominently
  mentioned, and a copy of the original software (or a pointer to its
  location) are included. The name of the author may not be used to endorse
  or promote products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
  WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  Effectively, this means you can do what you want with the software except
  remove this notice or take advantage of the author's name. If you modify
  the software and redistribute your modified version, you must indicate that
  your version is a modification of the original, and you must provide either
  a pointer to or a copy of the original.
\*---------------------------------------------------------------------------*/

package org.clapper.curn.output.html;

import org.w3c.dom.*;
import org.enhydra.xml.xmlc.html.HTMLObjectImpl;

/**
 * Base class for XMLC-generated HTML DOM classes. This class exists solely
 * to provide implementations for methods required by the JDK 1.5-supplied
 * version of the W3C DOM classes, but not generated by XMLC.
 *
 * @version <tt>$Revision$</tt>
 */
abstract class HTMLBase
    extends org.enhydra.xml.xmlc.html.HTMLObjectImpl
{
    protected HTMLBase()
    {
    }

    /*----------------------------------------------------------------------*\
                         org.w3c.dom.Document Methods
    \*----------------------------------------------------------------------*/

    public Node renameNode (Node n, String namespaceURI, String qualifiedName)
    {
        throw new IllegalStateException();
    }

    public void normalizeDocument()
    {
        throw new IllegalStateException();
    }

    public DOMConfiguration getDomConfig()
    {
        return null;
    }

    public void setDocumentURI (String uri)
    {
        throw new IllegalStateException();
    }

    public String getDocumentURI()
    {
        throw new IllegalStateException();
    }

    public void setXmlVersion (String version)
    {
        throw new IllegalStateException();
    }

    public String getXmlVersion()
    {
        throw new IllegalStateException();
    }

    public void setXmlStandalone (boolean onOff)
    {
        throw new IllegalStateException();
    }

    public boolean getXmlStandalone()
    {
        throw new IllegalStateException();
    }

    public String getXmlEncoding()
    {
        throw new IllegalStateException();
    }

    public String getInputEncoding()
    {
        throw new IllegalStateException();
    }

    /*----------------------------------------------------------------------*\
                         org.w3c.dom.Node Methods
    \*----------------------------------------------------------------------*/

    public String getUserData (String key)
    {
        throw new IllegalStateException();
    }

    public Object setUserData (String          key,
                               Object          value,
                               UserDataHandler handler)
    {
        throw new IllegalStateException();
    }

    public Object getFeature (String feature, String version)
    {
        throw new IllegalStateException();
    }

    public boolean isEqualNode (Node node)
    {
        throw new IllegalStateException();
    }

    public String lookupNamespaceURI (String prefix)
    {
        throw new IllegalStateException();
    }

    public String lookupPrefix (String namespaceURI)
    {
        throw new IllegalStateException();
    }

    public boolean isDefaultNamespace (String namespaceURI)
    {
        throw new IllegalStateException();
    }

    public boolean isSameNode (Node node)
    {
        throw new IllegalStateException();
    }

    public void setTextContent (String content)
    {
        throw new IllegalStateException();
    }

    public String getTextContent()
    {
        throw new IllegalStateException();
    }

    public short compareDocumentPosition (Node other)
    {
        throw new IllegalStateException();
    }

    public String getBaseURI()
    {
        return null;
    }
}
