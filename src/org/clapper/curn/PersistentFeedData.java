/*---------------------------------------------------------------------------*\
  This software is released under a BSD license, adapted from
  <http://opensource.org/licenses/bsd-license.php>

  Copyright &copy; 2004-2010 Brian M. Clapper.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  * Neither the name "clapper.org", "curn", nor the names of the project's
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\*---------------------------------------------------------------------------*/


package org.clapper.curn;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * <p>A <tt>PersistentFeedData</tt> object contains feed cache data and related
 * metadata for a single feed (or channel), in a form suitable for saving to
 * and restoring from an external store. The data are organized to make
 * persistence operations easier. At runtime, the data are reorganized: The
 * cache-specific data is stored in the feed cache (see {@link FeedCache}) and
 * other metadata items are parceled out to various plug-ins.</p>
 *
 * <p>There are three categories of persistent feed data:</p>
 *
 * <ul>
 *   <li> The feed cache data for the feed itself, stored in a
 *        {@link FeedCacheEntry} object
 *   <li> The feed cache data for the items within the feed, stored in
 *        individual {@link FeedCacheEntry} objects.
 *   <li> Any additional metadata (typically generated by plug-ins)
 *        associated with the feed, stored in name/value pairs within
 *        individual namespaces. (e.g., Each plug-in typically stores its
 *        data in a separate namespace.)
 * </ul>
 *
 * <p><b>WARNING:</b> This class is <b>not</b> thread-safe.</p>
 *
 * @see FeedCache
 * @see DataPersister
 * @see PersistentFeedItemData
 *
 * @version <tt>$Revision$</tt>
 */
public class PersistentFeedData
{
    /*----------------------------------------------------------------------*\
                               Private Constants
    \*----------------------------------------------------------------------*/

    /*----------------------------------------------------------------------*\
                             Private Instance Data
    \*----------------------------------------------------------------------*/

    /**
     * The FeedCacheEntry for this feed
     */
    private FeedCacheEntry feedCacheEntry = null;

    /**
     * The PersistentFeedItemData contained within this feed.
     */
    private Set<PersistentFeedItemData> feedItemData =
        new HashSet<PersistentFeedItemData>();

    /**
     * Extra metadata associated with the feed.
     */
    private Set<PersistentMetadataGroup> feedMetadata = 
        new HashSet<PersistentMetadataGroup>();

    /*----------------------------------------------------------------------*\
                                   Constructor
    \*----------------------------------------------------------------------*/

    /**
     * Creates a new instance of <tt>PersistentFeedData</tt>.
     *
     * @param feedCacheEntry the {@link FeedCacheEntry} for the channel/feed
     */
    public PersistentFeedData(FeedCacheEntry feedCacheEntry)
    {
        setFeedCacheEntry(feedCacheEntry);
    }

    /**
     * Allocate a new empty <tt>PersistentFeedData</tt> object.
     */
    public PersistentFeedData()
    {
    }

    /*----------------------------------------------------------------------*\
                                Public Methods
    \*----------------------------------------------------------------------*/

    /**
     * Get the {@link FeedCacheEntry} for the feed
     *
     * @return the {@link FeedCacheEntry}
     */
    public FeedCacheEntry getFeedCacheEntry()
    {
        return feedCacheEntry;
    }

    /**
     * Set the {@link FeedCacheEntry} field.
     *
     * @param feedCacheEntry the {@link FeedCacheEntry} object for the
     *                       channel/feed
     */
    public final void setFeedCacheEntry(final FeedCacheEntry feedCacheEntry)
    {
        this.feedCacheEntry = feedCacheEntry;

        // An entry for a channel will have the same entry URL as channel URL.

        assert(feedCacheEntry.isChannelEntry());
    }

    /**
     * Add persistent data for a feed item to this object.
     *
     * @param itemData  the {@link PersistentFeedItemData} object to add
     */
    public void addPersistentFeedItem(PersistentFeedItemData itemData)
    {
        feedItemData.add(itemData);
    }

    /**
     * Get the list of {@link PersistentFeedItemData} entries associated with
     * this feed.
     *
     * @return a read-only collection of {@link PersistentFeedItemData}
     *         objects and empty collection if there are none.
     *
     * @see #addPersistentFeedItem
     */
    public Collection<PersistentFeedItemData> getPersistentFeedItems()
    {
        return Collections.unmodifiableSet(feedItemData);
    }

    /**
     * Add a metadata group (i.e., all the metadata within a given
     * namespace) to this object.
     *
     * @param metadataGroup  the group of metadata
     */
    public void addFeedMetadataGroup(PersistentMetadataGroup metadataGroup)
    {
        feedMetadata.add(metadataGroup);
    }

    /**
     * Add a metadata group (i.e., all the metadata within a given
     * namespace) to this object.
     *
     * @param metadata  the metadata
     */
    public void addFeedMetadata(Collection<PersistentMetadataGroup> metadata)
    {
        for (PersistentMetadataGroup metadataGroup : metadata)
            addFeedMetadataGroup(metadataGroup);
    }

    /**
     * Get the extra metadata associated with the feed. The returned data
     * is aggregated into individual namespaces.
     *
     * @return a <tt>Collection</tt> of {@link PersistentMetadataGroup}
     *         objects, each one containing the data for one namespace.
     *         The collection will be empty if there is no feed metadata.
     */
    public Collection<PersistentMetadataGroup> getFeedMetadata()
    {
        return Collections.unmodifiableCollection(feedMetadata);
    }

    /*----------------------------------------------------------------------*\
                               Protected Methods
    \*----------------------------------------------------------------------*/

    /*----------------------------------------------------------------------*\
                                Private Methods
    \*----------------------------------------------------------------------*/
}
