<!--

Ant build file for clapper.org Java rssget utility

$Id$

-->

<project name="util" default="rssget" basedir=".">
  <description>
    Build file for "util" Java classes
  </description>

  <!--
  ***************************************************************************
				Properties
  ***************************************************************************
  -->

  <!-- set global properties for this build -->

  <property name="build" location="classes"/>
  <property name="dist"  location="dist"/>
  <property name="build.compiler" value="jikes"/>
  <property name="build.compiler.emacs" value="true"/>
  <property name="compile.listfiles" value="no"/>
  <property name="code_jarfile" value="rssget.jar"/>
  <property name="docs_zipfile" value="javadocs.zip"/>
  <property name="docs_top_dir" value="${dist}/docs"/>
  <property name="docs_api_dir" value="${docs_top_dir}/api"/>
  <property name="src_zipfile" value="src.zip"/>
  <property name="zip_dir_prefix" value="org/clapper/util/"/>

  <!--
  ***************************************************************************
			    Paths and Patterns
  ***************************************************************************
  -->

  <path id="project.class.path">
    <pathelement location="lib/"/>
    <pathelement path="${java.class.path}/"/>
    <pathelement path="classes/"/>
  </path>

  <patternset id="main.sources">
    <include name="*.java"/>
    <exclude name="parser/*/*.java"/>
    <exclude name="parser/*.java"/>
  </patternset>

  <patternset id="parser.main">
    <include name="parser/*.java"/>
    <exclude name="parser/*/*.java"/>
  </patternset>

  <patternset id="parser.builtin">
    <include name="parser/minirss/*.java"/>
  </patternset>

  <patternset id="parser.informa">
    <include name="parser/informa/*.java"/>
  </patternset>

  <patternset id="htmloutput">
    <include name="htmloutput/*.java"/>
  </patternset>

  <patternset id="email">
    <include name="email/*.java"/>
  </patternset>

  <!--
  ***************************************************************************
			  Initialization Targets
  ***************************************************************************
  -->

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <depend srcdir="." destdir="${build}"/>
  </target>

  <!--
  ***************************************************************************
			       Code Targets
  ***************************************************************************
  -->

  <target name="rssget" 
          depends="main, parser.builtin, parser.informa, htmloutput, email"/>

  <target name="parser.main" depends="init">
    <!-- Compile the java code from . into ${build} -->
    <javac srcdir="."
           depend="true"
           listfiles="${compile.listfiles}"
           destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="parser.main"/>
    </javac>
  </target>

  <target name="main" depends="parser.main">
    <!-- Compile the java code from . into ${build} -->
    <javac srcdir="."
           depend="true"
           listfiles="${compile.listfiles}"
           destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="main.sources"/>
    </javac>
  </target>

  <target name="parser.builtin" depends="parser.main">
    <javac srcdir="."
           depend="true"
           listfiles="${compile.listfiles}"
           destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="parser.builtin"/>
    </javac>
  </target>

  <target name="-check.informa.exists">
    <available classname="de.nava.informa.parsers.RSSParser"
               property="informa.exists" value="true"/>
  </target>

  <target name="-check.informa" 
          depends="-check.informa.exists"
          unless="informa.exists">
    <echo>
*** The Informa parser is not currently available in the build environment.
*** Because Informa is missing, all targets that require it will be skipped. 
*** To enable these targets, download Informa from
*** http://informa.sourceforge.net/ and follow the instructions in rssget's 
*** docs/BUILDING.txt file.
    </echo>
  </target>

  <target name="parser.informa" 
          depends="-check.informa,parser.main"
	  if="informa.exists">
    <javac srcdir="."
           depend="true"
           listfiles="${compile.listfiles}"
           destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="parser.informa"/>
    </javac>
  </target>

  <target name="informa" depends="parser.informa"/>

  <target name="-check.xmlc.exists">
    <available classname="org.enhydra.xml.xmlc.taskdef.Xmlc"
               property="xmlc.exists" value="true"/>
  </target>

  <target name="-check.xmlc" depends="-check.xmlc.exists" unless="xmlc.exists">
    <echo>
*** XMLC is not currently available in the build environment. Because of
*** this, all targets that require XMLC will be skipped. To enable these
*** targets, place a copy of xmlc-taskdef.jar and the XMLC runtime jars
*** in ANT_HOME/lib or in the CLASSPATH. XMLC is available at 
*** http://xmlc.objectweb.org/
    </echo>
  </target>

  <target name="htmloutput" depends="main,-check.xmlc" if="xmlc.exists">

    <!-- Make the <xmlc> task available -->

    <taskdef name="xmlc" classname="org.enhydra.xml.xmlc.taskdef.Xmlc"/>

    <!--
    Specifying "packagename" forces <xmlc> to create the generated Java source
    files a subdirectory. And, even then, the package name is wrong.
    Specifying just "packagedir" causes it to create a bad "package"
    line, but the file is at least local. Then, we edit it. (Yuck.)
     -->

    <xmlc srcdir="htmloutput"
          sourceout="htmloutput"
          includes="*.html"
          keep="yes"
          verbose="no"
          packagedir=".">
      <arg value="-delete-class"/>
      <arg value="mockup"/>
    </xmlc>

    <replaceregexp match="^package.*;" 
                   replace="package org.clapper.rssget.htmloutput;" 
                   flags="g" 
                   byline="true">
      <fileset dir="." includes="htmloutput/*.java">
        <contains text="XMLC GENERATED" casesensitive="yes"/>
      </fileset>
    </replaceregexp>

    <javac srcdir="."
           depend="true"
           listfiles="${compile.listfiles}"
           destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="htmloutput"/>
    </javac>
  </target>

  <target name="-check.email.exists">
    <available classname="org.clapper.util.mail.EmailMessage"
               property="email.exists" value="true"/>
  </target>

  <target name="-check.email" depends="-check.email.exists" 
          unless="email.exists">
    <echo>
*** The email classes from the org.clapper.util.mail package are not
*** currently available in the build environment. Rssget will build without
*** internal email support.
    </echo>
  </target>

  <target name="email" depends="main,-check.email" if="email.exists">

    <javac srcdir="."
           depend="true"
           listfiles="${compile.listfiles}"
           destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="email"/>
    </javac>
  </target>

  <!--
  ***************************************************************************
			      Javadoc targets
  ***************************************************************************
  -->

  <target name="doc"
          description="Generate API Javadocs">
    <mkdir dir="${docs_api_dir}"/>
    <javadoc
             destdir="${docs_api_dir}"
             sourcepath="../../.."
             author="true"
             version="true"
             splitindex="true"
             use="true"
             excludepackagenames=""
             packagenames="org.clapper.rssget.*"
             classpathref="project.class.path"
             windowtitle="clapper.org rssget utility">
      <doctitle><![CDATA[<h1>clapper.org rssget Documentation</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2004 Brian M. Clapper. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>

  <target name="docs" depends="doc"/>
  <target name="javadocs" depends="doc"/>

  <!--
  ***************************************************************************
			     Packaging Targets
  ***************************************************************************
  -->

  <target name="dist" depends="rssget"
          description="Generate the distribution">
    <mkdir dir="${dist}"/>
    <jar destfile="${dist}/${code_jarfile}" basedir="${build}"/>
  </target>

  <target name="doczip" depends="doc"
          description="Builds the javadocs zip file">
    <mkdir dir="${dist}"/>
    <zip destfile="${dist}/${docs_zipfile}">
      <zipfileset dir="${docs_top_dir}"
                  prefix="${zip_dir_prefix}"/>
    </zip>
  </target>

  <target name="srcjar" depends="clean"
          description="Generate the source jar">
    <mkdir dir="${dist}"/>
    <zip destfile="${dist}/${src_zipfile}">
      <zipfileset dir="." 
                  includes="**/*.java,**/*.html,**/*.xml"
                  excludes="**/CVS,${dist}/**,${build}/*"
                  prefix="${zip_dir_prefix}"/>
    </zip>
  </target>

  <target name="fulldist" depends="srcjar,doczip,dist"
          description="Generate the distribution and source jars"/>

  <!--
  ***************************************************************************
			     Clean-up Targets
  ***************************************************************************
  -->

  <target name="clean"
          description="clean up" >

    <delete failonerror="false">
      <fileset dir="." includes="htmloutput/*HTML.java"/>
      <fileset dir="." includes="htmloutput/*HTML.java.optionCheck"/>
    </delete>

    <delete dir="${build}" failonerror="false" includeEmptyDirs="true"/>
    <delete dir="${dist}" failonerror="false" includeEmptyDirs="true"/>
  </target>
</project>
