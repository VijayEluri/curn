<!--
  Ant build file for curn
  ===========================================================================
  $Id$

  This software is released under a BSD-style license:

  Copyright (c) 2004-2006 Brian M. Clapper. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1.  Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

  2.  The end-user documentation included with the redistribution, if any,
      must include the following acknowlegement:

        "This product includes software developed by Brian M. Clapper
        (bmc@clapper.org, http://www.clapper.org/bmc/). That software is
        copyright (c) 2004-2006 Brian M. Clapper."

      Alternately, this acknowlegement may appear in the software itself,
      if wherever such third-party acknowlegements normally appear.

  3.  Neither the names "clapper.org", "clapper.org Java Utility Library",
      nor any of the names of the project contributors may be used to
      endorse or promote products derived from this software without prior
      written permission. For written permission, please contact
      bmc@clapper.org.

  4.  Products derived from this software may not be called "clapper.org
      Java Utility Library", nor may "clapper.org" appear in their names
      without prior written permission of Brian M.a Clapper.

  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
  NO EVENT SHALL BRIAN M. CLAPPER BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<project name="curn" default="curn" basedir=".">

  <description>
This Ant build file builds the "curn" (Customizable Utilitarian RSS Notifier)
tool and its associated libraries. It can also be used to build binary,
source and documentation packages.
  </description>

  <!--
  ***************************************************************************
                                Properties
  ***************************************************************************
  -->

  <!-- set global properties for this build -->

  <property environment="env"/>
  <property name="pkg.path" value="org/clapper/curn"/>
  <dirname property="top.dir" file="${ant.file}"/> <!-- path to this dir -->
  <property name="src.top" location="${top.dir}/src"/>
  <property name="src.dir" location="${src.top}/${pkg.path}"/>

  <!--
       <javac> uses a different source directory to prevent constant
       recompilation. See "http://ant.apache.org/faq.html#always-recompiles"
       for details.
  -->
  <property name="javac.src.dir" location="${src.top}"/>

  <property name="build.dir.relative" value="build"/>
  <property name="build.dir"  location="${build.dir.relative}"/>
  <property name="compiled.classes.dir" location="${build.dir}/classes"/>
  <property name="build.info.file"
            value="${compiled.classes.dir}/${pkg.path}/BuildInfoBundle.properties"/>
  <property name="javac.listfiles" value="no"/>
  <property name="javac.source" value="1.5"/>
  <property name="javac.target" value="1.5"/>
  <property name="javac.debug" value="true"/>
  <property name="javac.depend" value="false"/>
  <property name="javac.lint.unchecked.opt" value="-Xlint:unchecked"/>
  <property name="curn.jar.name" value="curn"/>
  <property name="curn.jar.file" value="${curn.jar.name}.jar"/>
  <property name="curn.jar.dir" value="${build.dir}/lib"/>
  <property name="curn.jar.path" value="${curn.jar.dir}/${curn.jar.file}"/>
  <property name="curnboot.jar.name" value="curnboot"/>
  <property name="curnboot.jar.file" value="${curnboot.jar.name}.jar"/>
  <property name="curnboot.jar.dir" value="${curn.jar.dir}"/>
  <property name="curnboot.jar.path"
            value="${curnboot.jar.dir}/${curnboot.jar.file}"/>
  <property name="plugins.jar.name" value="curn-plugins"/>
  <property name="plugins.jar.file" value="${plugins.jar.name}.jar"/>
  <property name="plugins.jar.dir" value="${build.dir}/plugins"/>
  <property name="plugins.jar.path"
            value="${plugins.jar.dir}/${plugins.jar.file}"/>
  <property name="docs.dir" value="${top.dir}/docs"/>
  <property name="javadocs.dir" value="${build.dir}/javadocs"/>
  <property name="javadocs.api.dir" value="${javadocs.dir}/api"/>
  <property name="zip.dir.prefix" value="curn/"/>
  <property name="javadoc.zip.dir.prefix" value=""/>
  <property name="release.dir" value="${build.dir}/release"/>

  <property name="asm.version" value="2.2.3"/>

  <!--
      Load properties file containing user overrides for certain things.
  -->
  <property file="build.properties"/>

  <!--
  ***************************************************************************
                            Paths and Patterns
  ***************************************************************************
  -->
  <condition property="third.party.jar.dir" value="/usr/local/java/classes">
    <not>
      <isset property="third.party.jar.dir"/>
    </not>
  </condition>

  <path id="project.class.path">
    <pathelement location="lib/"/>
    <pathelement location="${third.party.jar.dir}/activation.jar"/>
    <pathelement location="${third.party.jar.dir}/mail.jar"/>
    <pathelement location="${third.party.jar.dir}/asm-${asm.version}.jar"/>
    <pathelement
        location="${third.party.jar.dir}/asm-commons-${asm.version}.jar"/>
    <pathelement
        location="${third.party.jar.dir}/asm-util-${asm.version}.jar"/>
    <pathelement location="${third.party.jar.dir}/commons-logging.jar"/>
    <pathelement location="${third.party.jar.dir}/freemarker.jar"/>
    <pathelement location="${third.party.jar.dir}/ocutil.jar"/>
    <pathelement location="${third.party.jar.dir}/xerces.jar"/>
    <pathelement location="${third.party.jar.dir}/bsf.jar"/>
    <pathelement location="${third.party.jar.dir}/rome.jar"/>
    <pathelement location="${third.party.jar.dir}/informa.jar"/>
    <pathelement location="${third.party.jar.dir}/jdom.jar"/>
  </path>

  <path id="installer.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${third.party.jar.dir}/izpack-compiler.jar"/>
  </path>

  <!--
  ***************************************************************************
                          Initialization Targets
  ***************************************************************************
  -->

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp>
      <format property="build.date" pattern="dd MMMM, yyyy HH:mm:ss z"
              locale="en"/>
    </tstamp>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${compiled.classes.dir}"/>
    <depend srcdir="${src.dir}" destdir="${compiled.classes.dir}"/>
  </target>

  <!--
  ***************************************************************************
                               Meta-Targets
  ***************************************************************************
  -->

  <target name="all" depends="curn"/>

  <target name="curn"
          depends="init,main,output,third.party.parsers,bundles,freemarker.templates,-build.info"
          description="Compiles the source"/>

  <target name="third.party.parsers"
          depends="parser.informa,parser.rome"/>

  <!--
  ***************************************************************************
                      Main (Top-level) Sources Target
  ***************************************************************************
  -->

  <target name="main">
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${javac.debug}"
           depend="${javac.depend}"
           listfiles="${javac.listfiles}"
           destdir="${compiled.classes.dir}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac.lint.unchecked.opt}"/>
      <compilerarg compiler="javac1.6" value="${javac.lint.unchecked.opt}"/>

      <classpath refid="project.class.path"/>

      <include name="${pkg.path}/*.java"/>
      <include name="${pkg.path}/util/*.java"/>
      <include name="${pkg.path}/plugins/*.java"/>
      <include name="${pkg.path}/parser/*.java"/>
      <include name="${pkg.path}/parser/minirss/*.java"/>
      <include name="${pkg.path}/parser/tester.java"/>

      <exclude name="${pkg.path}/parser/rome/*.java"/>
      <exclude name="${pkg.path}/parser/informa/*.java"/>

    </javac>

  </target>

  <!--
  ***************************************************************************
                          Resource Bundle Target
  ***************************************************************************
  -->

  <target name="bundles">
    <copy todir="${compiled.classes.dir}">
      <fileset dir="${src.top}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="freemarker.templates">
    <copy todir="${compiled.classes.dir}">
      <fileset dir="${src.top}">
        <include name="**/*.ftl"/>
      </fileset>
    </copy>
  </target>

  <!--
  ***************************************************************************
                          Informa Parser Targets
              (Only built if Informa libraries are present.)
  ***************************************************************************
  -->

  <target name="-check.informa.exists">
    <available classname="de.nava.informa.parsers.FeedParser"
               classpathref="project.class.path"
               property="informa.exists" value="true"/>
  </target>

  <target name="-check.informa"
          depends="-check.informa.exists"
          unless="informa.exists">
    <echo>
*** The Informa parser is not currently available in the build environment.
*** Because Informa is missing, all targets that require it will be skipped.
*** To enable these targets, download Informa from
*** http://informa.sourceforge.net/ and follow the instructions in curn's
*** docs/BUILDING.txt file.
    </echo>
  </target>

  <target name="parser.informa"
          depends="-check.informa"
          if="informa.exists">
    <echo level="verbose">Found Informa parser. Compiling Informa classes.</echo>
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${javac.debug}"
           depend="${javac.depend}"
           listfiles="${javac.listfiles}"
           destdir="${compiled.classes.dir}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac.lint.unchecked.opt}"/>
      <compilerarg compiler="javac1.6" value="${javac.lint.unchecked.opt}"/>

      <classpath refid="project.class.path"/>

      <patternset id="parser.informa">
        <include name="${pkg.path}/parser/informa/*.java"/>
      </patternset>

    </javac>
  </target>

  <target name="informa" depends="parser.informa"/>

  <!--
  ***************************************************************************
                            Rome Parser Targets
                (Only built if Rome libraries are present.)
  ***************************************************************************
  -->

  <target name="-check.rome.exists">
    <available classname="com.sun.syndication.io.SyndFeedInput"
               classpathref="project.class.path"
               property="rome.exists" value="true"/>
  </target>

  <target name="-check.rome"
          depends="-check.rome.exists"
          unless="rome.exists">
    <echo>
*** The Rome parser is not currently available in the build environment.
*** Because Informa is missing, all targets that require it will be skipped.
*** To enable these targets, download Rome from  https://rome.dev.java.net/
*** and install it according to the instructions.
    </echo>
  </target>

  <target name="parser.rome"
          depends="-check.rome"
          if="rome.exists">
    <echo level="verbose">Found Rome parser. Compiling Rome classes.</echo>
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${javac.debug}"
           depend="${javac.depend}"
           listfiles="${javac.listfiles}"
           destdir="${compiled.classes.dir}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac.lint.unchecked.opt}"/>
      <compilerarg compiler="javac1.6" value="${javac.lint.unchecked.opt}"/>

      <classpath refid="project.class.path"/>

      <patternset id="parser.rome">
        <include name="${pkg.path}/parser/rome/*.java"/>
      </patternset>

    </javac>
  </target>

  <target name="rome" depends="parser.rome"/>

  <!--
  ***************************************************************************
                        Main Output Handler Targets
  ***************************************************************************
  -->

  <target name="output">
    <!--
      First the local targets.
    -->
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${javac.debug}"
           depend="${javac.depend}"
           listfiles="${javac.listfiles}"
           destdir="${compiled.classes.dir}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac.lint.unchecked.opt}"/>
      <compilerarg compiler="javac1.6" value="${javac.lint.unchecked.opt}"/>

      <classpath refid="project.class.path"/>

      <patternset id="output">
         <include name="${pkg.path}/output/*.java"/>
         <include name="${pkg.path}/output/freemarker/*.java"/>
         <include name="${pkg.path}/output/html/*.java"/>
      </patternset>

    </javac>

    <!--
     Now the subtargets.
    -->
    <antcall target="output.script"/>
  </target>

  <!--
  ***************************************************************************
                       Script Output Handler Targets
  ***************************************************************************
  -->

  <target name="output.script" depends="-check.bsf" if="bsf.exists">

    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           target="${javac.target}"
           debug="${javac.debug}"
           depend="${javac.depend}"
           listfiles="${javac.listfiles}"
           destdir="${compiled.classes.dir}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac.lint.unchecked.opt}"/>
      <compilerarg compiler="javac1.6" value="${javac.lint.unchecked.opt}"/>

      <classpath refid="project.class.path"/>

      <patternset id="output.script">
        <include name="${pkg.path}/output/script/*.java"/>
      </patternset>

    </javac>

  </target>

  <target name="-check.bsf.exists">
    <available classname="org.apache.bsf.BSFManager"
               classpathref="project.class.path"
               property="bsf.exists" value="true"/>
  </target>

  <target name="-check.bsf" depends="-check.bsf.exists" unless="bsf.exists">
    <echo>
*** The Jakarta Apache Bean Scripting Framework (BSF) is not currently
*** available in the build environment. Because BSF is missing, all targets
*** that require BSF will be skipped. To enable these targets, place a copy of
*** bsf.jar in ANT_HOME/lib or in the CLASSPATH. BSF is available at
*** http://jakarta.apache.org/bsf/
    </echo>
  </target>

  <!--
  ***************************************************************************
                       Profiling & Debugging Targets
  ***************************************************************************
  -->

  <target name="profile" depends="build"
          description="Profile the project under the NetBeans IDEx">
    <fail unless="netbeans.home">This target requires the NetBeans IDE.</fail>
    <nbprofiledirect>
      <classpath refid="project.class.path"/>
    </nbprofiledirect>

    <java classname="org.clapper.curn.Bootstrap" fork="true">
      <classpath>
        <pathelement location="${curnboot.jar.path}"/>
      </classpath>

      <jvmarg value="${profiler.info.jvmargs.agent}"/>
      <jvmarg value="-Dcurn.home=${build.dir}"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-client"/>
      <jvmarg value="-Dorg.apache.commons.logging.log=org.apache.commons.logging.impl.Log4JLogger"/>
      <jvmarg value="-Dlog4j.configuration=file:${user.home}/.curn/log4j-debug.properties"/>
      <jvmarg value="-Did=profiler"/>
      <arg value="${curn.jar.dir}"/>
      <arg value="${third.party.jar.dir}"/>
      <arg value="@user.home/curn/plugins"/>
      <arg value="@user.home/.curn/lib"/>
      <arg value="@user.home/.curn/plugins"/>
      <arg value="--"/>
      <arg value="org.clapper.curn.Tool"/>
      <arg value="--logging"/>
      <arg value="--no-cache"/>
      <arg value="${user.home}/.curn/tst.cfg"/>
    </java>
  </target>

  <!--
  ***************************************************************************
                      Version and Build-info Targets
  ***************************************************************************
  -->

  <!-- Load the API version from the appropriate resource bundle -->

  <target name="-get.version" description="Get the version stamp">
    <property file="${compiled.classes.dir}/org/clapper/curn/Curn.properties"/>
    <echo>Version: ${curn.version}</echo>
  </target>

  <target name="show.version" depends="-get.version"/>

  <target name="version" depends="-get.version"/>

  <target name="-build.info" depends="-get.version">

    <taskdef name="make_build_info"
             classname="org.clapper.util.ant.MakeBuildInfoTask"
             classpathref="project.class.path"/>

    <condition property="compiler" value="${build.compiler}">
      <isset property="build.compiler"/>
    </condition>

    <condition property="compiler" value="javac">
      <not>
        <isset property="build.compiler"/>
      </not>
    </condition>

    <make_build_info file="${build.info.file}"
                     antversion="${ant.version}"
                     compiler="${compiler}"/>
  </target>

  <!--
  ***************************************************************************
                              Javadoc targets
  ***************************************************************************
  -->

  <target name="javadocs" description="Generate API Javadocs">
    <mkdir dir="${javadocs.api.dir}"/>
    <javadoc
             destdir="${javadocs.api.dir}"
             sourcepath="${src.top}"
             source="${javac.source}"
             breakiterator="true"
             author="true"
             version="true"
             splitindex="true"
             use="true"
             excludepackagenames=""
             overview="overview.html"
             packagenames="org.clapper.curn.*"
             classpathref="project.class.path"
             windowtitle="clapper.org curn utility">
      <doctitle><![CDATA[<h1><i>curn</i>: Customizable Utilitarian RSS Notifier</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2004-2006 Brian M. Clapper. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>

  <target name="javadoc" depends="javadocs"/>

  <!--
  ***************************************************************************
                             Packaging Targets
  ***************************************************************************
  -->

  <target name="-set.version.properties" depends="-get.version">
    <property name="versioned_src_zipfile"
              value="src-${curn.version}.zip"/>

    <property name="versioned_curn.jar.file"
              value="${curn.jar.name}-${curn.version}.jar"/>

    <property name="versioned_curnboot.jar.file"
              value="${curnboot.jar.name}-${curn.version}.jar"/>

    <property name="versioned_plugins.jar.file"
              value="${plugins.jar.name}-${curn.version}.jar"/>

    <property name="versioned_docs_zipfile"
              value="docs-${curn.version}.zip"/>

    <property name="versioned_javadocs_zipfile"
              value="javadocs-${curn.version}.zip"/>
  </target>

  <target name="code.jar" depends="curn.jar, curnboot.jar"/>
  <target name="curn.jar" depends="all"
          description="Generate the binary jar file">
    <mkdir dir="${curn.jar.dir}"/>
    <jar jarfile="${curn.jar.path}">
      <fileset dir="${compiled.classes.dir}">
        <exclude name="**/plugins/*.class"/>
        <exclude name="org/clapper/curn/Bootstrap.class"/>
        <exclude name="org/clapper/curn/BootstrapException.class"/>
      </fileset>
    </jar>
  </target>

  <target name="curnboot.jar" depends="all"
          description="Generate the binary bootstrap jar file">
    <mkdir dir="${curnboot.jar.dir}"/>
    <jar jarfile="${curnboot.jar.path}">
      <fileset dir="${compiled.classes.dir}">
        <include name="org/clapper/curn/Bootstrap.class"/>
        <include name="org/clapper/curn/BootstrapException.class"/>
      </fileset>
    </jar>
  </target>

  <target name="plugins.jar" depends="all"
          description="Generate the binary jar file">
    <mkdir dir="${plugins.jar.dir}"/>
    <jar jarfile="${plugins.jar.path}">
      <fileset dir="${compiled.classes.dir}">
        <include name="**/plugins/*.class"/>
      </fileset>
    </jar>
  </target>

  <target name="build" depends="jar"/>
  <target name="jar" depends="curnboot.jar, curn.jar, plugins.jar"
          description="Build the code jars"/>

  <target name="javadoczip" depends="javadocs"
          description="Builds the javadocs zip file">
    <mkdir dir="${release.dir}"/>
    <zip destfile="${release.dir}/${versioned_javadocs_zipfile}">
      <zipfileset dir="${javadocs.dir}"
                  prefix="${javadoc.zip.dir.prefix}"/>
    </zip>
  </target>

  <target name="doczip"
          description="Builds the non-Javadocs documentation zip file">
    <mkdir dir="${release.dir}"/>
    <zip destfile="${release.dir}/${versioned_docs_zipfile}">
      <zipfileset dir="${docs.dir}"
                  prefix="${zip.dir.prefix}"/>
    </zip>
  </target>

  <target name="srczip" depends=""
          description="Generate the source zip">
    <mkdir dir="${release.dir}"/>
    <zip destfile="${release.dir}/${versioned_src_zipfile}">
      <!--
          WARNING: This file set is essentially duplicated in the installer's
          config file, below. There's no way around that, unfortunately.
      -->
      <zipfileset id="source.fileset" dir="."
                  prefix="${zip.dir.prefix}" casesensitive="yes">
        <exclude name="${build.dir}/**"/>
        <exclude name="${compiled.classes.dir}"/>
        <exclude name="**/CVS"/>
        <include name="**/*.java"/>
        <include name="**/package.html"/>
        <include name="overview.html"/>
        <include name="**/*.xml"/>
        <include name="**/*.ftl"/>
        <include name="**/*.properties"/>
      </zipfileset>
    </zip>
  </target>

  <target name="release"
          depends="build,
                   -set.version.properties,
                   srczip,
                   doczip,
                   javadoczip"
          description="Generate the distribution and source jars">
    <copy file="${curnboot.jar.path}"
          tofile="${release.dir}/${versioned_curnboot.jar.file}"/>
    <copy file="${curn.jar.path}"
          tofile="${release.dir}/${versioned_curn.jar.file}"/>
    <copy file="${plugins.jar.path}"
          tofile="${release.dir}/${versioned_plugins.jar.file}"/>
  </target>

  <!--
  ***************************************************************************
                             Installer Target
  ***************************************************************************
  -->

  <!--
      If you're going to build the installer, you'll need the IzPack
      utility (http://www.izforge.com/izpack/), and you'll have to set
      this value to the location of the IzPack installation.
  -->
  <property name="izpack.home" value="/usr/local/java/IzPack"/>
  <property name="src.install" value="${src.top}/installer"/>

  <target name="-installer.prep">

    <!-- Define the IzPack task -->

    <taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask"
             classpathref="installer.class.path"/>

    <!-- Create a temporary installation directory -->

    <property name="install.tmp" location="${build.dir}/install"/>
    <delete dir="${install.tmp}"/>
    <mkdir dir="${install.tmp}"/>

    <!-- Edit the installer template -->

    <copy file="${src.install}/install.xml" todir="${install.tmp}">
      <filterset>
        <filter token="CURN_VERSION" value="${curn.version}"/>
        <filter token="INSTALL_TMP" value="${install.tmp}"/>
        <filter token="SRC_INSTALL" value="${src.install}"/>
        <filter token="RELEASE_DIR" value="${release.dir}"/>
        <filter token="THIRD_PARTY_JAR_DIR" value="${third.party.jar.dir}"/>
        <filter token="ASM_VERSION" value="${asm.version}"/>
        <filter token="TOP_DIR" value="${top.dir}"/>
        <filter token="SRC_TOP" value="${src.top}"/>
        <filter token="BUILD_DIR" value="${build.dir}"/>
        <filter token="BUILD_DIR_RELATIVE" value="${build.dir.relative}"/>
        <filter token="JAVADOCS_DIR" value="${javadocs.dir}"/>
        <filter token="DOCS_DIR" value="${docs.dir}"/>
        <filter token="CLASSES_DIR" value="${compiled.classes.dir}"/>
        <filter token="VERSIONED_CURN_JAR_FILE"
                value="${versioned_curn.jar.file}"/>
        <filter token="VERSIONED_CURNBOOT_JAR_FILE"
                value="${versioned_curnboot.jar.file}"/>
        <filter token="VERSIONED_PLUGINS_JAR_FILE"
                value="${versioned_plugins.jar.file}"/>
      </filterset>
    </copy>

    <!-- Copy and rename the appropriate ocutil.jar file -->

    <condition property="ocutil.dir"
               value="${env.OCUTIL_DIR}"
               else="${env.wwwtest}/software/java/util/download/latest">
      <isset property="env.OCUTIL_DIR"/>
    </condition>

    <echo>Copying ocutil.jar from ${ocutil.dir}</echo>
    <copy todir="${install.tmp}">
      <fileset dir="${ocutil.dir}"
               includes="ocutil*.jar"/>
    </copy>
    <move tofile="${install.tmp}/ocutil.jar">
      <fileset dir="${install.tmp}" includes="ocutil*.jar"/>
    </move>

    <!--
        Copy the LICENSE file and "unwrap" it so it's not wrapped weirdly
        in the installer's License GUI screen. Oddly enough, this isn't an
        issue with the README file
    -->

    <copy todir="${install.tmp}" file="LICENSE"/>

    <!-- First, replace all double newlines with "@@@@" -->
    <replace dir="${install.tmp}">
      <include name="LICENSE"/>

      <replacetoken><![CDATA[

]]></replacetoken>
      <replacevalue>@@@@</replacevalue>
    </replace>

    <!-- Next, replace single newlines with blanks -->
    <replace dir="${install.tmp}">
      <include name="LICENSE"/>

      <replacetoken><![CDATA[
]]></replacetoken>
      <replacevalue> </replacevalue>
    </replace>

    <!-- Finally, restore the double newlines -->
    <replace dir="${install.tmp}">
      <include name="LICENSE"/>
      <replacetoken>@@@@</replacetoken>
      <replacevalue><![CDATA[

]]></replacevalue>
    </replace>
  </target>

  <target name="installer"
          depends="-set.version.properties, -installer.prep">

    <!-- Build the installer -->

    <izpack input="${install.tmp}/install.xml"
            output="${release.dir}/install-curn-${curn.version}.jar"
            installerType="standard"
            basedir="."
            izPackDir="${izpack.home}">
    </izpack>

    <delete dir="${install.tmp}"/>
  </target>

  <!--
  ***************************************************************************
                             Clean-up Targets
  ***************************************************************************
  -->

  <target name="clean"
          description="clean up" >

    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${build.dir}"/>
    </delete>

    <delete dir="${install.tmp}"/>
  </target>
</project>
